/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core;

import db.DBWorker;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.ResultSetTableModel;

/**
 *
 * @author Paulo Lima
 */
public class aRPform extends javax.swing.JFrame {

    /**
     * Creates new form aRP
     */
    public aRPform() {
        initComponents();

//        Formatar obj = new Formatar();
//        obj.FormatarJtable1(jTable1);
       
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAdicionarPresenca = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnListarPresencas = new javax.swing.JButton();
        txtPresencaFormando = new javax.swing.JTextField();
        txtPresencaDominio = new javax.swing.JTextField();
        txtPresencaHora = new javax.swing.JTextField();
        txtPresencaData = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnRemoverPresenca = new javax.swing.JButton();
        btnAlterarPresenca = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuGeral = new javax.swing.JMenu();
        menuFormando = new javax.swing.JMenuItem();
        menuDominio = new javax.swing.JMenuItem();
        menuRecolonizar = new javax.swing.JMenuItem();
        menuContadorHoras = new javax.swing.JMenuItem();
        menuSobre = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("aRP");

        btnAdicionarPresenca.setText("3.1 Adicionar Presença");
        btnAdicionarPresenca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarPresencaActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnListarPresencas.setText("3.2 Listar Presenças");
        btnListarPresencas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarPresencasActionPerformed(evt);
            }
        });

        jLabel1.setText("Formando:");

        jLabel2.setText("Domínio:");

        jLabel3.setText("Hora:");

        jLabel4.setText("Data:");

        btnRemoverPresenca.setText("3.3 Remover Presença");
        btnRemoverPresenca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverPresencaActionPerformed(evt);
            }
        });

        btnAlterarPresenca.setText("3.4 Alterar Presença");
        btnAlterarPresenca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarPresencaActionPerformed(evt);
            }
        });

        jLabel5.setText("Formato: AAAA-MM-DD");

        menuGeral.setText("Menu");

        menuFormando.setText("Formandos");
        menuFormando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFormandoActionPerformed(evt);
            }
        });
        menuGeral.add(menuFormando);

        menuDominio.setText("Domínios");
        menuDominio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDominioActionPerformed(evt);
            }
        });
        menuGeral.add(menuDominio);

        menuRecolonizar.setText("Recolonizar");
        menuRecolonizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRecolonizarActionPerformed(evt);
            }
        });
        menuGeral.add(menuRecolonizar);

        menuContadorHoras.setText("Contador Horas");
        menuContadorHoras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuContadorHorasActionPerformed(evt);
            }
        });
        menuGeral.add(menuContadorHoras);

        jMenuBar1.add(menuGeral);

        menuSobre.setText("Sobre");
        menuSobre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuSobreMouseClicked(evt);
            }
        });
        menuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSobreActionPerformed(evt);
            }
        });
        jMenuBar1.add(menuSobre);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdicionarPresenca, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtPresencaHora, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPresencaData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPresencaDominio, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPresencaFormando, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnListarPresencas, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoverPresenca, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAlterarPresenca, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnAdicionarPresenca, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1)
                        .addGap(1, 1, 1)
                        .addComponent(txtPresencaFormando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPresencaDominio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(txtPresencaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPresencaData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnListarPresencas, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btnRemoverPresenca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAlterarPresenca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuSobreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuSobreMouseClicked

        JOptionPane.showMessageDialog(rootPane, "Realizado por:\nPaulo Lima\nNovembro 2021");
    }//GEN-LAST:event_menuSobreMouseClicked

    private void menuFormandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFormandoActionPerformed
        formandoForm fForm = new formandoForm();
        fForm.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_menuFormandoActionPerformed

    private void menuDominioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDominioActionPerformed
        dominioForm dForm = new dominioForm();
        dForm.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_menuDominioActionPerformed

    private void btnListarPresencasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarPresencasActionPerformed
        //listar as presenças existentes na base de dados
        try {
            String user = "root";
            String password = "";
            String baseDados = "registopresencas";
            String server = "127.0.0.1";
            DBWorker db;
            db = new DBWorker(server, user, password, baseDados);
            ResultSet rs = db.executeQuery("SELECT presença.id, presença.data_aula, presença.hora, formando.Nome, domínio.Designacao\n"
                    + "FROM presença\n"
                    + "INNER JOIN formando\n"
                    + "ON presença.formando_id = formando.id\n"
                    + "INNER JOIN domínio\n"
                    + "ON presença.domínio_id = domínio.id\n"
                    + "ORDER BY id;");
            ResultSetTableModel m = new ResultSetTableModel(rs);
            jTable1.setModel(m);
        
        

        } catch (SQLException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnListarPresencasActionPerformed

    private void menuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSobreActionPerformed

    }//GEN-LAST:event_menuSobreActionPerformed

    private void menuRecolonizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRecolonizarActionPerformed

        Recolonizacao obj = new Recolonizacao();
        try {
            obj.Recolonizar();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuRecolonizarActionPerformed

    private void btnRemoverPresencaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverPresencaActionPerformed
        Object[] options = {"Sim", "Não"};
        int dialogResult;
        dialogResult = JOptionPane.showOptionDialog(
                null,
                "Confirma a eliminação?",
                "ATENÇÃO!",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.WARNING_MESSAGE,
                null,
                options,
                options[0]
        );
        if (dialogResult == 0) {
            try {

                int p = jTable1.getSelectedRow();
                int PK = Integer.parseInt((String) jTable1.getValueAt(p, 0));
                String sSQL = "DELETE from presença where id = " + PK;
                String user = "root";
                String password = "";
                String baseDados = "registopresencas";
                String server = "127.0.0.1";
                DBWorker db;
                db = new DBWorker(server, user, password, baseDados);
                int r = db.executeUpdate(sSQL);
            } catch (SQLException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnRemoverPresencaActionPerformed
    private int buscaChavePrimariaFormando(String s) {
        //recebe o nome do formando e devolve a respetiva chave ou id
        int PK = -1;
        try {
            String user = "root";
            String password = "";
            String baseDados = "registopresencas";
            String server = "127.0.0.1";
            DBWorker db = new DBWorker(server, user, password, baseDados);
            ResultSet rs = db.executeQuery("SELECT id FROM "
                    + "formando where nome ='" + s + "';");
            rs.next();
            PK = Integer.parseInt((String) rs.getString(1));
        } catch (SQLException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        }

        return PK;
    }

    private int buscaChavePrimariaDominio(String s) {
        //recebe o nome do Domínio e devolve a respetiva chave ou id
        int PK = -1;
        try {
            String user = "root";
            String password = "";
            String baseDados = "registopresencas";
            String server = "127.0.0.1";
            DBWorker db = new DBWorker(server, user, password, baseDados);
            ResultSet rs = db.executeQuery("SELECT id FROM "
                    + "domínio where designacao='" + s + "';");
            rs.next();
            PK = Integer.parseInt((String) rs.getString(1));
        } catch (SQLException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
        }
        return PK;
    }
    private void btnAdicionarPresencaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarPresencaActionPerformed
        // qual a PK do formando que está escrito na textbox?
        //buscar o nome do formando à textbox:
        String sFormando = (String) txtPresencaFormando.getText();
        //enviar o nome para o método e receber a chave primária:
        int pkFormando = Integer.parseInt(String.valueOf(buscaChavePrimariaFormando(sFormando)));

        // qual a PK do domínio que está escrito na textbox?
        //buscar o nome do cliente à textbox:
        String sDominio = (String) txtPresencaDominio.getText();
        //enviar o nome para o método e receber a chave primária:
        int pkDominio = Integer.parseInt(String.valueOf(buscaChavePrimariaDominio(sDominio)));

        if ((pkFormando != -1) && (pkDominio != -1)) {

            String sHora = txtPresencaHora.getText();
            String sData = txtPresencaData.getText();
            try {
                // inserir presença na base de dados

                String sSQL = "INSERT into presença (data_aula, hora, formando_id, Domínio_id) values ('" + sData + "','" + sHora + "','" + pkFormando + "','" + pkDominio + "')";

                String user = "root";
                String password = "";
                String baseDados = "registopresencas";
                String server = "127.0.0.1";

                DBWorker db;
                db = new DBWorker(server, user, password, baseDados);
                int r = db.executeUpdate(sSQL);
            } catch (SQLException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);

            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Erro: O Formando ou o Domínio não existem na base de dados");
        }

    }//GEN-LAST:event_btnAdicionarPresencaActionPerformed

    private void btnAlterarPresencaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarPresencaActionPerformed

        String sFormando = (String) txtPresencaFormando.getText();
        //enviar o nome para o método e receber a chave primária:
        int pkFormando = Integer.parseInt(String.valueOf(buscaChavePrimariaFormando(sFormando)));

        // qual a PK do domínio que está escrito na textbox?
        //buscar o nome do cliente à textbox:
        String sDominio = (String) txtPresencaDominio.getText();
        //enviar o nome para o método e receber a chave primária:
        int pkDominio = Integer.parseInt(String.valueOf(buscaChavePrimariaDominio(sDominio)));

        if ((pkFormando != -1) && (pkDominio != -1)) {
            try {
                //modificar dados da presença selecionada
                int p = jTable1.getSelectedRow();

                int PK = Integer.parseInt((String) jTable1.getValueAt(p, 0));

                String s1 = txtPresencaData.getText();
                String s2 = txtPresencaHora.getText();

                String sSQL = "UPDATE presença set data_aula = '" + s1
                        + "', hora = '" + s2 + "', formando_id = '" + pkFormando + "', Domínio_id = '" + pkDominio + "' where id = " + PK;

                JOptionPane.showMessageDialog(this, "Presença alterada com sucesso");
                String user = "root";
                String password = "";
                String baseDados = "registopresencas";
                String server = "127.0.0.1";
                DBWorker db;
                db = new DBWorker(server, user, password, baseDados);
                int r = db.executeUpdate(sSQL);
            } catch (SQLException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Erro: O Formando ou o Domínio não existem na base de dados");
        }
    }//GEN-LAST:event_btnAlterarPresencaActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        ResultSetTableModel model = (ResultSetTableModel) jTable1.getModel();

        int linhaSelecionada = jTable1.getSelectedRow();

        txtPresencaData.setText(model.getValueAt(linhaSelecionada, 1).toString());
        txtPresencaFormando.setText(model.getValueAt(linhaSelecionada, 3).toString());
        txtPresencaDominio.setText(model.getValueAt(linhaSelecionada, 4).toString());
        txtPresencaHora.setText(model.getValueAt(linhaSelecionada, 2).toString());

    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int numLinha = jTable1.getSelectedRow();
            if (numLinha != -1) {
                Object[] options = {"Sim", "Não"};
                int dialogResult;
                dialogResult = JOptionPane.showOptionDialog(
                        null,
                        "Confirma a eliminação?",
                        "ATENÇÃO!",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null,
                        options,
                        options[0]
                );
                if (dialogResult == 0) {
                    try {

                        int p = jTable1.getSelectedRow();
                        int PK = Integer.parseInt((String) jTable1.getValueAt(p, 0));
                        String sSQL = "DELETE from presença where id = " + PK;
                        String user = "root";
                        String password = "";
                        String baseDados = "registopresencas";
                        String server = "127.0.0.1";
                        DBWorker db;
                        db = new DBWorker(server, user, password, baseDados);
                        int r = db.executeUpdate(sSQL);
                    } catch (SQLException ex) {
                        Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                        Logger.getLogger(aRPform.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void menuContadorHorasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuContadorHorasActionPerformed
        FormY dForm = new FormY();
        dForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuContadorHorasActionPerformed

    /**
         * @param args the command line arguments
         */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(aRPform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(aRPform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(aRPform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(aRPform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new aRPform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarPresenca;
    private javax.swing.JButton btnAlterarPresenca;
    private javax.swing.JButton btnListarPresencas;
    private javax.swing.JButton btnRemoverPresenca;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem menuContadorHoras;
    private javax.swing.JMenuItem menuDominio;
    private javax.swing.JMenuItem menuFormando;
    private javax.swing.JMenu menuGeral;
    private javax.swing.JMenuItem menuRecolonizar;
    private javax.swing.JMenu menuSobre;
    private javax.swing.JTextField txtPresencaData;
    private javax.swing.JTextField txtPresencaDominio;
    private javax.swing.JTextField txtPresencaFormando;
    private javax.swing.JTextField txtPresencaHora;
    // End of variables declaration//GEN-END:variables
}
